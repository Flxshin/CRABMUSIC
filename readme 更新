# Navidrome 用户管理系统需求文档

## 1. 文档概述

### 1.1 项目背景
本系统旨在为Navidrome音乐服务器提供一个完善的用户管理平台，实现用户注册、登录、账户管理、邀请机制、积分系统和后台管理等功能。

### 1.2 目标用户
- 普通用户：使用Navidrome音乐服务的终端用户
- 管理员：管理用户和系统配置的管理人员

### 1.3 系统架构
- 前端：基于React/Vue的单页面应用(SPA)
- 后端：RESTful API服务，与Navidrome集成
- 数据库：MySQL/PostgreSQL

## 2. 功能需求

### 2.1 用户模块

#### 2.1.1 注册页面 (register-page)
- **字段要求**：
  - 用户名：3-20字符，字母数字下划线
  - 邮箱：有效邮箱格式验证
  - 密码：8位以上，包含大小写和数字
  - 密码确认：必须与密码一致
  - 邀请码：必填字段
- **功能**：
  - 实时表单验证
  - 提交后创建Navidrome用户
  - 默认30天有效期设置
  - 成功后跳转登录页

#### 2.1.2 登录页面 (login-page)
- **字段要求**：
  - 用户名/邮箱
  - 密码
  - "记住我"复选框
- **功能**：
  - 登录验证
  - JWT token生成
  - 忘记密码链接（发送重置邮件）
  - 注册页面链接

### 2.2 用户中心模块

#### 2.2.1 控制面板 (dashboard-page)
- **功能组件**：
  - 账户状态卡片：显示状态、到期时间、剩余天数
  - 用户统计：听歌数、听歌时长、邀请好友数
  - 每日签到按钮（带连续签到奖励提示）
  - 快捷导航到其他功能区域

#### 2.2.2 个人中心 (profile-page)
- **功能**：
  - 基本信息展示与编辑（用户名、邮箱）
  - 账户信息展示（注册日期、最后登录时间）
  - 修改密码功能（需验证当前密码）
  - 修改用户名功能（30天内限1次）

### 2.3 邀请管理模块 (invites-page)
- **功能**：
  - 专属邀请码展示（剩余数量）
  - 邀请链接一键复制
  - 邀请奖励规则说明
  - 邀请记录表格（包含好友、注册时间、状态、奖励状态）
  - 邀请码生成功能（管理员）

### 2.4 积分系统 (points-page)
- **功能**：
  - 积分统计卡片（当前积分、累计收入、累计支出）
  - 积分商城：
    - 兑换邀请码
    - 账户延期（7天/30天/180天）
  - 积分流水记录（时间、类型、详情、变动、余额）

### 2.5 管理员模块 (admin-page)

#### 2.5.1 用户管理
- 用户列表表格（支持分页、搜索）
- 批量操作：
  - 添加用户
  - 导出用户数据
  - 批量修改状态
- 用户状态管理：
  - 活跃用户统计
  - 即将到期用户提醒

#### 2.5.2 邀请码管理
- 生成规则配置：
  - 字符集选择
  - 生成数量
  - 有效期设置
- 状态跟踪：
  - 已使用/可用/已过期统计
  - 批量生成功能

#### 2.5.3 积分配置
- 积分获取规则：
  - 签到积分（基础+连续奖励）
  - 邀请奖励
  - 听歌奖励
- 积分兑换项目管理：
  - 添加/编辑兑换项
  - 启用/禁用状态管理

## 3. 非功能需求

### 3.1 性能需求
- 页面加载时间：<2秒
- API响应时间：<500ms
- 支持500+并发用户

### 3.2 安全需求
- 密码加密存储（bcrypt）
- HTTPS传输
- CSRF防护
- XSS防护
- 权限验证（RBAC）

### 3.3 兼容性需求
- 浏览器支持：Chrome, Firefox, Safari, Edge最新版
- 移动端适配：iOS/Android主流浏览器
- 响应式布局：适配桌面、平板和手机

### 3.4 可维护性
- 前后端分离架构
- 完善的API文档
- 清晰的代码注释
- 单元测试覆盖率>80%

## 4. 技术栈建议

### 4.1 前端
- 框架：React.js/Vue.js
- UI库：Ant Design/Element UI
- 状态管理：Redux/Vuex
- 路由：React Router/Vue Router
- 图表：ECharts/Chart.js
- 构建工具：Webpack/Vite

### 4.2 后端
- 语言：Node.js(Express/NestJS)/Java Spring Boot
- 数据库：MySQL/PostgreSQL
- 缓存：Redis
- 认证：JWT
- API文档：Swagger

### 4.3 部署
- 容器化：Docker
- 编排：Docker Compose/Kubernetes
- CI/CD：GitHub Actions/Jenkins

## 5. 数据模型（关键表）

### 5.1 用户表(users)
- id, username, email, password_hash, status, role, created_at, last_login, expires_at

### 5.2 邀请码表(invites)
- code, creator_id, used_by, created_at, expires_at, status

### 5.3 积分表(points)
- user_id, balance, total_earned, total_spent

### 5.4 积分流水(point_transactions)
- user_id, type, amount, balance, description, created_at

### 5.5 签到记录(check_ins)
- user_id, date, streak_days, points_earned

## 6. API接口概览

### 6.1 认证相关
- POST /api/auth/register - 用户注册
- POST /api/auth/login - 用户登录
- POST /api/auth/refresh - 刷新token
- POST /api/auth/forgot-password - 忘记密码

### 6.2 用户相关
- GET /api/users/me - 获取当前用户信息
- PUT /api/users/me - 更新用户信息
- PUT /api/users/me/password - 修改密码

### 6.3 邀请相关
- GET /api/invites - 获取我的邀请码
- POST /api/invites - 生成邀请码(管理员)
- GET /api/invites/history - 邀请记录

### 6.4 积分相关
- GET /api/points - 我的积分
- GET /api/points/transactions - 积分流水
- POST /api/points/check-in - 每日签到
- POST /api/points/redeem - 积分兑换

### 6.5 管理员API
- GET /api/admin/users - 用户列表
- POST /api/admin/users - 创建用户
- PUT /api/admin/users/{id} - 更新用户
- GET /api/admin/invites - 邀请码管理
- GET /api/admin/points-config - 积分配置

## 7. 项目里程碑

### 7.1 第一阶段（4周）
- 核心功能：注册、登录、个人中心
- 基础架构搭建
- 数据库设计实现
- 基础API开发

### 7.2 第二阶段（3周）
- 邀请管理系统
- 积分系统核心功能
- 管理员基础功能

### 7.3 第三阶段（2周）
- 数据统计与可视化
- 系统配置管理
- 性能优化

### 7.4 第四阶段（1周）
- 测试与修复
- 文档完善
- 部署上线

## 8. 测试计划

### 8.1 单元测试
- 核心业务逻辑
- 工具函数
- API端点

### 8.2 集成测试
- 用户注册登录流程
- 积分获取与兑换流程
- 管理员操作流程

### 8.3 E2E测试
- 完整用户旅程测试
- 跨页面交互测试
- 性能测试

## 9. 附录

### 9.1 术语表
- Navidrome: 开源的音乐服务器软件
- JWT: JSON Web Token, 用于认证
- RBAC: 基于角色的访问控制

### 9.2 参考文档
- Navidrome官方文档
- RESTful API设计指南
- OWASP安全指南

---

此文档可作为开发团队的参考指南，建议在开发过程中根据实际情况进行必要的调整和补充。
